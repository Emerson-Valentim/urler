/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * EVS API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { axiosMutator } from './axios';
export interface CreateAccount {
  username: string;
  password: string;
}

export interface Account {
  username: string;
  createdAt: string;
  updatedAt?: string;
}

export interface SignIn {
  username: string;
  password: string;
}

export interface Token {
  token: string;
}

export interface CreateURL {
  longUrl: string;
}

export interface ListURLs {
  longUrl?: string;
  shortUrl?: string;
}

export interface Url {
  longUrl?: string;
  shortUrl?: string;
  createdAt?: string;
  updatedAt?: string;
}

/**
 * @summary Create an account
 */
export const postAccount = (
    createAccount: CreateAccount,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<Account>(
      {url: `/account`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAccount, signal
    },
      );
    }
  


export const getPostAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAccount>>, TError,{data: CreateAccount}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAccount>>, TError,{data: CreateAccount}, TContext> => {

const mutationKey = ['postAccount'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAccount>>, {data: CreateAccount}> = (props) => {
          const {data} = props ?? {};

          return  postAccount(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postAccount>>>
    export type PostAccountMutationBody = CreateAccount
    export type PostAccountMutationError = unknown

    /**
 * @summary Create an account
 */
export const usePostAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAccount>>, TError,{data: CreateAccount}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAccount>>,
        TError,
        {data: CreateAccount},
        TContext
      > => {

      const mutationOptions = getPostAccountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Sign in
 */
export const postSignin = (
    signIn: SignIn,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<Token>(
      {url: `/signin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signIn, signal
    },
      );
    }
  


export const getPostSigninMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSignin>>, TError,{data: SignIn}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postSignin>>, TError,{data: SignIn}, TContext> => {

const mutationKey = ['postSignin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSignin>>, {data: SignIn}> = (props) => {
          const {data} = props ?? {};

          return  postSignin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSigninMutationResult = NonNullable<Awaited<ReturnType<typeof postSignin>>>
    export type PostSigninMutationBody = SignIn
    export type PostSigninMutationError = unknown

    /**
 * @summary Sign in
 */
export const usePostSignin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSignin>>, TError,{data: SignIn}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postSignin>>,
        TError,
        {data: SignIn},
        TContext
      > => {

      const mutationOptions = getPostSigninMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create a URL
 */
export const postUrl = (
    createURL: CreateURL,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<Url>(
      {url: `/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createURL, signal
    },
      );
    }
  


export const getPostUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUrl>>, TError,{data: CreateURL}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUrl>>, TError,{data: CreateURL}, TContext> => {

const mutationKey = ['postUrl'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUrl>>, {data: CreateURL}> = (props) => {
          const {data} = props ?? {};

          return  postUrl(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postUrl>>>
    export type PostUrlMutationBody = CreateURL
    export type PostUrlMutationError = unknown

    /**
 * @summary Create a URL
 */
export const usePostUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUrl>>, TError,{data: CreateURL}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postUrl>>,
        TError,
        {data: CreateURL},
        TContext
      > => {

      const mutationOptions = getPostUrlMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary List URLs
 */
export const getUrl = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<Url[]>(
      {url: `/url`, method: 'GET', signal
    },
      );
    }
  

export const getGetUrlQueryKey = () => {
    return [`/url`] as const;
    }

    
export const getGetUrlQueryOptions = <TData = Awaited<ReturnType<typeof getUrl>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUrl>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUrlQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUrl>>> = ({ signal }) => getUrl(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getUrl>>>
export type GetUrlQueryError = unknown


export function useGetUrl<TData = Awaited<ReturnType<typeof getUrl>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUrl>>,
          TError,
          Awaited<ReturnType<typeof getUrl>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUrl<TData = Awaited<ReturnType<typeof getUrl>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUrl>>,
          TError,
          Awaited<ReturnType<typeof getUrl>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUrl<TData = Awaited<ReturnType<typeof getUrl>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUrl>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List URLs
 */

export function useGetUrl<TData = Awaited<ReturnType<typeof getUrl>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUrl>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUrlQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
